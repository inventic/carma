// Generated by CoffeeScript 1.3.3
(function() {
  var chooseFieldTemplate, forgetView, pickTemplate;

  this.renderScreen = function(screenName, args) {
    var screen, tpl, viewName, _results;
    console.info('rendering screen', screenName);
    forgetScreen();
    screen = global.screens[screenName];
    global.activeScreen = screen;
    $("li.active").removeClass("active");
    $el(screenName + "-screen-nav").addClass("active");
    tpl = $el(screen.template).html();
    global.topElement.html(tpl);
    _results = [];
    for (viewName in screen.views) {
      _results.push((function(viewName) {
        var setup;
        setup = screen.views[viewName];
        if (!_.isNull(setup)) {
          return setup(viewName, args);
        }
      })(viewName));
    }
    return _results;
  };

  forgetView = function(viewName) {
    var vW;
    vW = global.viewsWare[viewName];
    if (!_.isUndefined(vW.knockVM)) {
      kb.vmRelease(vW.knockVM);
    }
    vW = {};
    return $el(viewName).empty();
  };

  this.forgetScreen = function() {
    var viewName;
    for (viewName in global.viewsWare) {
      forgetView(viewName);
    }
    global.topElement.empty();
    global.viewsWare = {};
    return global.activeScreen = null;
  };

  this.renderFields = function(model, viewName) {
    var contents, ctx, currentGroup, currentSection, f, fType, group, mainGroup, readonly, realType, slices, templates, tpl, _i, _len, _ref;
    templates = getTemplates("field-template");
    contents = {};
    fType = "";
    group = "";
    readonly = false;
    mainGroup = "_";
    slices;

    currentGroup = mainGroup;
    currentSection = mainGroup;
    contents[mainGroup] = "";
    _ref = model.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      if (_.isNull(f.meta) || !f.meta.invisible) {
        if (f.meta != null) {
          f.readonly = f.meta.readonly;
        }
        readonly = f.readonly || !model.canUpdate || !f.canWrite;
        ctx = {
          readonly: readonly,
          viewName: viewName
        };
        slices = /(\w+)_(\w+)/.exec(f.name);
        if (slices != null) {
          group = slices[1];
        } else {
          group = mainGroup;
        }
        if (f.meta && _.has(f.meta, "infoText")) {
          f.meta.infoText = global.dictionaries.InfoText[f.meta.infoText];
        }
        if (f.type === "dictionary") {
          ctx = _.extend(ctx, {
            dictionary: global.dictionaries[f.meta.dictionaryName]
          });
        }
        ctx = _.extend(f, ctx);
        realType = f.type;
        if (group !== currentGroup) {
          currentGroup = group;
          if (currentGroup === mainGroup) {
            currentSection = mainGroup;
          } else {
            currentSection = f.name;
            if (f.meta && (!f.meta.mainOnly)) {
              f.type = "group";
              tpl = chooseFieldTemplate(f, templates);
              contents[mainGroup] += Mustache.render(tpl, ctx);
              f.type = realType;
            }
          }
        }
        if (!_.has(contents, currentSection)) {
          contents[currentSection] = "";
        }
        tpl = chooseFieldTemplate(f, templates);
        contents[currentSection] += Mustache.render(tpl, ctx);
        if (f.meta && (f.meta.mainToo || f.meta.mainOnly)) {
          contents[mainGroup] += Mustache.render(tpl, ctx);
        }
      }
    }
    return contents;
  };

  this.mkSubviewName = function(refField, refN, parentModelName, parentId) {
    return "" + parentModelName + "-" + parentId + "-" + refField + "-view-" + refN;
  };

  this.mkSubviewClass = function(refField, parentModelName, parentId) {
    return "" + parentModelName + "-" + parentId + "-" + refField + "-views";
  };

  chooseFieldTemplate = function(field, templates) {
    var named_tpl, tpl, typed_tpl, widget_tpl;
    typed_tpl = field.type;
    named_tpl = field.name + "-" + field.type;
    widget_tpl = "";
    if ((field.meta != null) && _.has(field.meta, "widget")) {
      widget_tpl = field.meta.widget + "-" + field.type;
    }
    tpl = pickTemplate(templates, [named_tpl, widget_tpl, typed_tpl, "unknown"]);
    return tpl;
  };

  this.renderPermissions = function(model, viewName) {
    var modelRo;
    modelRo = !model.canUpdate && !model.canCreate && !model.canDelete;
    return Mustache.render($("#permission-template").text(), _.extend(model, {
      viewName: viewName,
      readonly: modelRo
    }));
  };

  this.getTemplates = function(cls) {
    var templates, tmp, _i, _len, _ref;
    templates = {};
    _ref = $("." + cls);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tmp = _ref[_i];
      templates[tmp.id.replace("-" + cls, "")] = tmp.text;
    }
    return templates;
  };

  this.renderDep = function(refBook, templates) {
    var typed_tpl;
    typed_tpl = refBook.refField;
    return Mustache.render(pickTemplate(templates, [typed_tpl, ""]), refBook);
  };

  pickTemplate = function(templates, names) {
    var n, _i, _len;
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      n = names[_i];
      if (_.has(templates, n)) {
        return templates[n];
      }
    }
    return Mustache.render($("#unknown-template").html(), {
      names: names
    });
  };

}).call(this);
